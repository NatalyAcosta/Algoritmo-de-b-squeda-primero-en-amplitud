# -*- coding: utf-8 -*-
"""BSF.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pl346yfgmmjnj1Y8_O2eykFdPdR-S_5M
"""

'''Inicialmente se procede a importar la libreria Queue'''
from queue import Queue

class Grafo:
    '''En la siguiente línea se encuentra el constructor con parametros y numero de nodos'''
    def __init__(self, numero_nodos, dirigido=True):
        '''En la siguiente línea se encuentra el atributo de la instancia'''
        self.m_numero_nodos = numero_nodos
        ''''En la siguiente línea se encuentra el rango de retornos'''
        self.m_nodos = range(self.m_numero_nodos)
		
        '''En la siguiente línea se encuentra el atributo de  la instancia de la clase 
        especifica grafo dirigido o no dirigido'''
        self.m_dirigido = dirigido
		
        '''En la siguiente línea se genera el diccionario de lista '''
        self.m_adj_list = {nodo: set() for nodo in self.m_nodos}      
	
    '''En la siguiente línea se insertan los nodos al grafo '''
    def add_arista(self, nodo1, nodo2, peso=1):

        '''En la siguiente línea se accede al diccionario de lista para agregar nodos 1 y 2'''
        self.m_adj_list[nodo1].add((nodo2, peso))
        '''En la siguiente línea se encuentra la condicion para un nodo no dirigido'''
        if not self.m_dirigido:
            self.m_adj_list[nodo2].add((nodo1, peso))
 
    '''En la siguiente línea se encuentra el parametro y procede a imprimir los valores'''
    def print_adj_list(self):
        '''En la siguiente línea se encuentra el recorrido de cada uno de los elementos'''
        for key in self.m_adj_list.keys():
            print("node", key, ": ", self.m_adj_list[key])

  
    ''' Este es el docstring de la función bfs_traversal
      Los parámetros de la funcion  son: self y nodo_inicio
    '''



    
    def bfs_traversal(self, nodo_inicio):

        '''    
        >>> bfs_traversal(' g = Grafo(5, dirigido=True)')
        ' '

        '''



        
        ''' En la siguiente línea se encuentra el conjunto de nodos visitados '''
        visitado = set()
        cola = Queue()

        ''' En la siguiente línea se inserta el nodo inicio a la cola y la lista visitada'''
        cola.put(nodo_inicio)
        visitado.add(nodo_inicio)

        '''En la siguiente línea se ejecuta una instruccion mientras tenga valores'''
        while not cola.empty():
            '''En la siguiente línea se encuentra se indica el nodo actual y se imprime el nodo actual'''
            nodo_actual = cola.get()
            print(nodo_actual, end = " ")

           

            ''' En la siguiente línea se encuentra se obtiene todos los vértices adyacentes '''
            for (next_node, weight) in self.m_adj_list[nodo_actual]:
                '''En la siguiente se indica si el nodo no es visitado'''
                if next_node not in visitado:
                    cola.put(next_node)

                    ''' En la siguiente línea se visita el nodo  y se lo pone en cola'''
                    visitado.add(next_node)










'''En la siguiente línea se encuentra el metodo main para la ejecucion del programa'''
if __name__ == "__main__":
    '''En la siguiente línea se crea la instancia del
     objeto tipo grafo especificado como parametro el numero de nodos y el tipo de grafo'''
    g = Grafo(6, dirigido=False)
    '''En la siguiente línea se encuentra se añade el numero de nodos para recorrer'''
    g.add_arista(0, 1)
    g.add_arista(0, 2)
    g.add_arista(0, 3)
    g.add_arista(0, 4)
    g.add_arista(1, 2)
    g.add_arista(2, 3)
    g.add_arista(2, 5)
    g.add_arista(3, 4)
    g.add_arista(3, 5)
    g.add_arista(4 ,5)
    '''En la siguiente línea se realiza la impresión del recorrido realizado ,se refiere a la lista de adyacencia'''
    g.print_adj_list()
    '''En la siguiente línea se realiza la impresión del mensaje que indica el recorrido'''

    print ("El recorrido realizado por amplitud" " (se inicializa en el vertice 0)")
    g.bfs_traversal(0)
    print()